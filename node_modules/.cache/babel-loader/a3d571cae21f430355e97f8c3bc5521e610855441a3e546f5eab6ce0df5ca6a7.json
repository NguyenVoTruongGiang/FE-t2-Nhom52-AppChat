{"ast":null,"code":"var _jsxFileName = \"D:\\\\demoReact\\\\my-app\\\\src\\\\hooks\\\\useWebSocket.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(null);\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const socketRef = useRef(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    if (!socketRef.current) {\n      const newSocket = new WebSocket(url);\n      socketRef.current = newSocket;\n      newSocket.onopen = () => {\n        console.log(\"WebSocket connected successfully.\");\n      };\n      newSocket.onmessage = event => {\n        console.log('Received message from server:', event.data);\n        try {\n          const receivedMessage = JSON.parse(event.data);\n          console.log('Parsed message:', receivedMessage);\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        } catch (error) {\n          console.error('Failed to parse message from the server:', error);\n        }\n      };\n      newSocket.onclose = () => {\n        console.log(\"WebSocket closed.\");\n        socketRef.current = null;\n      };\n      return () => {\n        if (newSocket && newSocket.readyState === WebSocket.OPEN) {\n          newSocket.close();\n        }\n      };\n    }\n  }, []);\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type: type,\n          to: to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: {\n      messages,\n      sendMessage,\n      registerUser,\n      loginUser,\n      sendChatMessage,\n      users,\n      addUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketProvider, \"ZHRFz0lm3B7jsY3jgwGuN7uO2uA=\");\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  return useContext(WebSocketContext);\n};\n_s2(useWebSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","jsxDEV","_jsxDEV","WebSocketContext","WebSocketProvider","children","_s","messages","setMessages","users","setUsers","socketRef","url","current","newSocket","WebSocket","onopen","console","log","onmessage","event","data","receivedMessage","JSON","parse","prevMessages","error","onclose","readyState","OPEN","close","sendMessage","message","send","registerUser","username","password","stringify","action","user","pass","loginUser","sendChatMessage","type","to","mes","addUser","prevUsers","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","$RefreshReg$"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\r\n\r\nconst WebSocketContext = createContext(null);\r\n\r\nexport const WebSocketProvider = ({ children }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const socketRef = useRef(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    if (!socketRef.current) {\r\n      const newSocket = new WebSocket(url);\r\n      socketRef.current = newSocket;\r\n\r\n      newSocket.onopen = () => {\r\n        console.log(\"WebSocket connected successfully.\");\r\n      };\r\n\r\n      newSocket.onmessage = (event) => {\r\n        console.log('Received message from server:', event.data);\r\n        try {\r\n          const receivedMessage = JSON.parse(event.data);\r\n          console.log('Parsed message:', receivedMessage);\r\n          setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n        } catch (error) {\r\n          console.error('Failed to parse message from the server:', error);\r\n        }\r\n      };\r\n\r\n      newSocket.onclose = () => {\r\n        console.log(\"WebSocket closed.\");\r\n        socketRef.current = null;\r\n      };\r\n\r\n      return () => {\r\n        if (newSocket && newSocket.readyState === WebSocket.OPEN) {\r\n          newSocket.close();\r\n        }\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"REGISTER\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type: type,\r\n            to: to,\r\n            mes: message\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers((prevUsers) => [...prevUsers, user]);\r\n  };\r\n\r\n  return (\r\n    <WebSocketContext.Provider value={{ messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser }}>\r\n      {children}\r\n    </WebSocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useWebSocket = () => useContext(WebSocketContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}