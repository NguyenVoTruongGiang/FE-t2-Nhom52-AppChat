{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useWebSocket = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [clientUUID, setClientUUID] = useState(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    const newSocket = new WebSocket(url);\n    setSocket(newSocket);\n    newSocket.onopen = () => {\n      console.log('WebSocket connected successfully.');\n    };\n    newSocket.onmessage = event => {\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        if (receivedMessage.data.event === 'RE_LOGIN') {\n          setClientUUID(receivedMessage.data.data.RE_LOGIN_CODE);\n        } else {\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        }\n      } catch (error) {\n        console.error('Error parsing server message:', error);\n      }\n    };\n    newSocket.onclose = () => {\n      console.log('WebSocket closed.');\n    };\n    return () => {\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\n        newSocket.close();\n      }\n    };\n  }, []);\n  const sendMessage = message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(message);\n    } else {\n      console.error('WebSocket is not open.');\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: 'onchat',\n      data: {\n        event: 'REGISTER',\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: 'onchat',\n      data: {\n        event: 'LOGIN',\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const reLoginUser = (username, code) => {\n    sendMessage(JSON.stringify({\n      action: 'onchat',\n      data: {\n        event: 'RE_LOGIN',\n        data: {\n          user: username,\n          code: code\n        }\n      }\n    }));\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    reLoginUser,\n    clientUUID\n  };\n};\n_s(useWebSocket, \"g7cQQ4iWOfJmd+zgLBoeclcDwL8=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useWebSocket","_s","messages","setMessages","socket","setSocket","clientUUID","setClientUUID","url","newSocket","WebSocket","onopen","console","log","onmessage","event","receivedMessage","JSON","parse","data","RE_LOGIN_CODE","prevMessages","error","onclose","readyState","OPEN","close","sendMessage","message","send","registerUser","username","password","stringify","action","user","pass","loginUser","reLoginUser","code"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useWebSocket = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const [clientUUID, setClientUUID] = useState(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    const newSocket = new WebSocket(url);\r\n    setSocket(newSocket);\r\n\r\n    newSocket.onopen = () => {\r\n      console.log('WebSocket connected successfully.');\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        if (receivedMessage.data.event === 'RE_LOGIN') {\r\n          setClientUUID(receivedMessage.data.data.RE_LOGIN_CODE);\r\n        } else {\r\n          setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing server message:', error);\r\n      }\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log('WebSocket closed.');\r\n    };\r\n\r\n    return () => {\r\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\r\n        newSocket.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(message);\r\n    } else {\r\n      console.error('WebSocket is not open.');\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(JSON.stringify({\r\n      action: 'onchat',\r\n      data: { event: 'REGISTER', data: { user: username, pass: password } }\r\n    }));\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(JSON.stringify({\r\n      action: 'onchat',\r\n      data: { event: 'LOGIN', data: { user: username, pass: password } }\r\n    }));\r\n  };\r\n\r\n  const reLoginUser = (username, code) => {\r\n    sendMessage(JSON.stringify({\r\n      action: 'onchat',\r\n      data: { event: 'RE_LOGIN', data: { user: username, code: code } }\r\n    }));\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, reLoginUser, clientUUID };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMU,GAAG,GAAG,oCAAoC;EAEhDT,SAAS,CAAC,MAAM;IACd,MAAMU,SAAS,GAAG,IAAIC,SAAS,CAACF,GAAG,CAAC;IACpCH,SAAS,CAACI,SAAS,CAAC;IAEpBA,SAAS,CAACE,MAAM,GAAG,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC;IAEDJ,SAAS,CAACK,SAAS,GAAIC,KAAK,IAAK;MAC/B,IAAI;QACF,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC;QAC9C,IAAIH,eAAe,CAACG,IAAI,CAACJ,KAAK,KAAK,UAAU,EAAE;UAC7CR,aAAa,CAACS,eAAe,CAACG,IAAI,CAACA,IAAI,CAACC,aAAa,CAAC;QACxD,CAAC,MAAM;UACLjB,WAAW,CAAEkB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEL,eAAe,CAAC,CAAC;QACnE;MACF,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDb,SAAS,CAACc,OAAO,GAAG,MAAM;MACxBX,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED,OAAO,MAAM;MACX,IAAIJ,SAAS,IAAIA,SAAS,CAACe,UAAU,KAAKd,SAAS,CAACe,IAAI,EAAE;QACxDhB,SAAS,CAACiB,KAAK,CAAC,CAAC;MACnB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAIC,OAAO,IAAK;IAC/B,IAAIxB,MAAM,IAAIA,MAAM,CAACoB,UAAU,KAAKd,SAAS,CAACe,IAAI,EAAE;MAClDrB,MAAM,CAACyB,IAAI,CAACD,OAAO,CAAC;IACtB,CAAC,MAAM;MACLhB,OAAO,CAACU,KAAK,CAAC,wBAAwB,CAAC;IACzC;EACF,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3CL,WAAW,CAACV,IAAI,CAACgB,SAAS,CAAC;MACzBC,MAAM,EAAE,QAAQ;MAChBf,IAAI,EAAE;QAAEJ,KAAK,EAAE,UAAU;QAAEI,IAAI,EAAE;UAAEgB,IAAI,EAAEJ,QAAQ;UAAEK,IAAI,EAAEJ;QAAS;MAAE;IACtE,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMK,SAAS,GAAGA,CAACN,QAAQ,EAAEC,QAAQ,KAAK;IACxCL,WAAW,CAACV,IAAI,CAACgB,SAAS,CAAC;MACzBC,MAAM,EAAE,QAAQ;MAChBf,IAAI,EAAE;QAAEJ,KAAK,EAAE,OAAO;QAAEI,IAAI,EAAE;UAAEgB,IAAI,EAAEJ,QAAQ;UAAEK,IAAI,EAAEJ;QAAS;MAAE;IACnE,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMM,WAAW,GAAGA,CAACP,QAAQ,EAAEQ,IAAI,KAAK;IACtCZ,WAAW,CAACV,IAAI,CAACgB,SAAS,CAAC;MACzBC,MAAM,EAAE,QAAQ;MAChBf,IAAI,EAAE;QAAEJ,KAAK,EAAE,UAAU;QAAEI,IAAI,EAAE;UAAEgB,IAAI,EAAEJ,QAAQ;UAAEQ,IAAI,EAAEA;QAAK;MAAE;IAClE,CAAC,CAAC,CAAC;EACL,CAAC;EAED,OAAO;IAAErC,QAAQ;IAAEyB,WAAW;IAAEG,YAAY;IAAEO,SAAS;IAAEC,WAAW;IAAEhC;EAAW,CAAC;AACpF,CAAC;AAACL,EAAA,CApEID,YAAY;AAsElB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}