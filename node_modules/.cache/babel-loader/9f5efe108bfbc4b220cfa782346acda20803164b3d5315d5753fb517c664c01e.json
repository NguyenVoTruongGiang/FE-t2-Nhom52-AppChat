{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState(() => {\n    const userKey = currentUser ? `users_${currentUser}` : 'default_user';\n    const savedUsers = localStorage.getItem(userKey);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  const socketRef = useRef(url);\n  useEffect(() => {\n    // socketRef.current = new WebSocket(url);\n\n    socketRef.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n    };\n    socketRef.onmessage = event => {\n      console.log(\"Received message from server:\", event.data);\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        console.log(\"Parsed message:\", receivedMessage);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\n          console.log(\"User logged in successfully.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to parse message from the server:\", error);\n      }\n    };\n    socketRef.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n    };\n    return () => {\n      // if (socketRef && socketRef.current.readyState === WebSocket.OPEN) {\n      //   socketRef.current.close();\n      // }\n    };\n  }, [socketRef]);\n  useEffect(() => {\n    if (currentUser) {\n      const userKey = `users_${currentUser}`;\n      localStorage.setItem(userKey, JSON.stringify(users));\n      console.log(currentUser);\n    }\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socketRef && socketRef.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type,\n          to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"n7nziam5BGFQQkD/aoglqtBtIZI=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","currentUser","_s","messages","setMessages","users","setUsers","userKey","savedUsers","localStorage","getItem","JSON","parse","url","socketRef","onopen","console","log","onmessage","event","data","receivedMessage","prevMessages","status","error","onclose","setItem","stringify","sendMessage","message","readyState","WebSocket","OPEN","current","send","registerUser","username","password","action","user","pass","loginUser","sendChatMessage","type","to","mes","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState(() => {\r\n    const userKey = currentUser ? `users_${currentUser}` : 'default_user';\r\n    const savedUsers = localStorage.getItem(userKey);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n  const socketRef = useRef(url);\r\n\r\n  useEffect(() => {\r\n    // socketRef.current = new WebSocket(url);\r\n\r\n    socketRef.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n    };\r\n\r\n    socketRef.onmessage = (event) => {\r\n      console.log(\"Received message from server:\", event.data);\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        console.log(\"Parsed message:\", receivedMessage);\r\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\r\n\r\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\r\n          console.log(\"User logged in successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to parse message from the server:\", error);\r\n      }\r\n    };\r\n  \r\n    socketRef.onclose = () => {\r\n      console.log(\"WebSocket connection closed.\");\r\n    };\r\n\r\n    return () => {\r\n      // if (socketRef && socketRef.current.readyState === WebSocket.OPEN) {\r\n      //   socketRef.current.close();\r\n      // }\r\n    };\r\n  }, [socketRef]);\r\n\r\n  useEffect(() => {\r\n    if(currentUser) {\r\n      const userKey = `users_${currentUser}`;\r\n      localStorage.setItem(userKey, JSON.stringify(users));\r\n      console.log(currentUser);\r\n    }\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef && socketRef.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"REGISTER\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type,\r\n            to,\r\n            mes: message\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers(prevUsers => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser };\r\n};\r\n\r\nexport default useWebSocket;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}