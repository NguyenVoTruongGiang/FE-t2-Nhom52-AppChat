{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [users, setUsers] = useState(() => {\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    const newSocket = new WebSocket(url);\n    setSocket(newSocket);\n    newSocket.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n    };\n    newSocket.onmessage = event => {\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        if (receivedMessage.status === \"success\") {\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        } else {\n          console.error('Received message with invalid structure:', receivedMessage);\n        }\n      } catch (error) {\n        console.error('Failed to send message to the server:', error);\n      }\n    };\n    newSocket.onclose = () => {\n      console.log(\"WebSocket closed.\");\n    };\n    return () => {\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\n        newSocket.close();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type: type,\n          to: to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"ObplpR7DU9Ctu624eisBvpkPgsc=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useWebSocket","currentUser","_s","messages","setMessages","socket","setSocket","users","setUsers","savedUsers","localStorage","getItem","JSON","parse","url","newSocket","WebSocket","onopen","console","log","onmessage","event","receivedMessage","data","status","prevMessages","error","onclose","readyState","OPEN","close","setItem","stringify","sendMessage","message","send","registerUser","username","password","action","user","pass","loginUser","sendChatMessage","type","to","mes","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const [users, setUsers] = useState(() => {\r\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    const newSocket = new WebSocket(url);\r\n    setSocket(newSocket);\r\n\r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        if (receivedMessage.status === \"success\") {\r\n          setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n        } else {\r\n          console.error('Received message with invalid structure:', receivedMessage);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to send message to the server:', error);\r\n      }\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket closed.\");\r\n    };\r\n\r\n    return () => {\r\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\r\n        newSocket.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"REGISTER\", \r\n          data: { \r\n            user: username, \r\n            pass: password \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"LOGIN\", \r\n          data: { \r\n            user: username, \r\n            pass: password \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"SEND_CHAT\", \r\n          data: { \r\n            type: type, \r\n            to: to, \r\n            mes: message \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers((prevUsers) => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,YAAY,GAAIC,WAAW,IAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,MAAM;IACvC,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAE,SAAQV,WAAY,EAAC,CAAC;IAC/D,OAAOQ,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,EAAE;EACjD,CAAC,CAAC;EACF,MAAMK,GAAG,GAAG,oCAAoC;EAEhDf,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,IAAIC,SAAS,CAACF,GAAG,CAAC;IACpCR,SAAS,CAACS,SAAS,CAAC;IAEpBA,SAAS,CAACE,MAAM,GAAG,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAClD,CAAC;IAEDJ,SAAS,CAACK,SAAS,GAAIC,KAAK,IAAK;MAC/B,IAAI;QACF,MAAMC,eAAe,GAAGV,IAAI,CAACC,KAAK,CAACQ,KAAK,CAACE,IAAI,CAAC;QAC9C,IAAID,eAAe,CAACE,MAAM,KAAK,SAAS,EAAE;UACxCpB,WAAW,CAAEqB,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,eAAe,CAAC,CAAC;QACnE,CAAC,MAAM;UACLJ,OAAO,CAACQ,KAAK,CAAC,0CAA0C,EAAEJ,eAAe,CAAC;QAC5E;MACF,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IAEDX,SAAS,CAACY,OAAO,GAAG,MAAM;MACxBT,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC,CAAC;IAED,OAAO,MAAM;MACX,IAAIJ,SAAS,IAAIA,SAAS,CAACa,UAAU,KAAKZ,SAAS,CAACa,IAAI,EAAE;QACxDd,SAAS,CAACe,KAAK,CAAC,CAAC;MACnB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN/B,SAAS,CAAC,MAAM;IACdW,YAAY,CAACqB,OAAO,CAAE,SAAQ9B,WAAY,EAAC,EAAEW,IAAI,CAACoB,SAAS,CAACzB,KAAK,CAAC,CAAC;EACrE,CAAC,EAAE,CAACA,KAAK,EAAEN,WAAW,CAAC,CAAC;EAExB,MAAMgC,WAAW,GAAIC,OAAO,IAAK;IAC/B,IAAI7B,MAAM,IAAIA,MAAM,CAACuB,UAAU,KAAKZ,SAAS,CAACa,IAAI,EAAE;MAClDxB,MAAM,CAAC8B,IAAI,CAACD,OAAO,CAAC;IACtB,CAAC,MAAM;MACLhB,OAAO,CAACQ,KAAK,CAAC,wBAAwB,CAAC;IACzC;EACF,CAAC;EAED,MAAMU,YAAY,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC3CL,WAAW,CACTrB,IAAI,CAACoB,SAAS,CAAC;MACbO,MAAM,EAAE,QAAQ;MAChBhB,IAAI,EAAE;QACJF,KAAK,EAAE,UAAU;QACjBE,IAAI,EAAE;UACJiB,IAAI,EAAEH,QAAQ;UACdI,IAAI,EAAEH;QACR;MACF;IACF,CAAC,CACH,CAAC;EACH,CAAC;EAED,MAAMI,SAAS,GAAGA,CAACL,QAAQ,EAAEC,QAAQ,KAAK;IACxCL,WAAW,CACTrB,IAAI,CAACoB,SAAS,CAAC;MACbO,MAAM,EAAE,QAAQ;MAChBhB,IAAI,EAAE;QACJF,KAAK,EAAE,OAAO;QACdE,IAAI,EAAE;UACJiB,IAAI,EAAEH,QAAQ;UACdI,IAAI,EAAEH;QACR;MACF;IACF,CAAC,CACH,CAAC;EACH,CAAC;EAED,MAAMK,eAAe,GAAGA,CAACC,IAAI,EAAEC,EAAE,EAAEX,OAAO,KAAK;IAC7CD,WAAW,CACTrB,IAAI,CAACoB,SAAS,CAAC;MACbO,MAAM,EAAE,QAAQ;MAChBhB,IAAI,EAAE;QACJF,KAAK,EAAE,WAAW;QAClBE,IAAI,EAAE;UACJqB,IAAI,EAAEA,IAAI;UACVC,EAAE,EAAEA,EAAE;UACNC,GAAG,EAAEZ;QACP;MACF;IACF,CAAC,CACH,CAAC;EACH,CAAC;EAED,MAAMa,OAAO,GAAIP,IAAI,IAAK;IACxBhC,QAAQ,CAAEwC,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAER,IAAI,CAAC,CAAC;EAC/C,CAAC;EAED,OAAO;IAAErC,QAAQ;IAAE8B,WAAW;IAAEG,YAAY;IAAEM,SAAS;IAAEC,eAAe;IAAEpC,KAAK;IAAEwC;EAAQ,CAAC;AAC5F,CAAC;AAAC7C,EAAA,CAxGIF,YAAY;AA0GlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}