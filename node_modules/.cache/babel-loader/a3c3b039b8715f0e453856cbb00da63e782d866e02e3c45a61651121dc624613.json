{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nconst useWebSocket = currentUser => {\n  _s();\n  const socketRef = useRef(null);\n  const isConnectedRef = useRef(false);\n  const isLoggedInRef = useRef(false);\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n\n  // WebSocket URL\n  const url = 'wss://your-websocket-url';\n  useEffect(() => {\n    if (!socketRef.current && currentUser) {\n      const newSocket = new WebSocket(url);\n      socketRef.current = newSocket;\n      newSocket.onopen = () => {\n        if (!isConnectedRef.current) {\n          console.log(\"WebSocket connected successfully.\");\n          isConnectedRef.current = true;\n          if (currentUser) {\n            loginUser(currentUser.username, currentUser.password);\n          } else {\n            console.error(\"currentUser is undefined.\");\n          }\n        }\n      };\n      newSocket.onmessage = event => {\n        console.log('Received message from server:', event.data);\n        try {\n          const receivedMessage = JSON.parse(event.data);\n          console.log('Parsed message:', receivedMessage);\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n          if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\n            isLoggedInRef.current = true;\n          }\n        } catch (error) {\n          console.error('Failed to parse message from the server:', error);\n        }\n      };\n      newSocket.onclose = () => {\n        console.log(\"WebSocket closed.\");\n        socketRef.current = null;\n        isConnectedRef.current = false;\n      };\n      return () => {\n        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n          socketRef.current.close();\n        }\n      };\n    }\n  }, [currentUser]);\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n      // Try reconnecting the WebSocket if it's not open\n      if (!socketRef.current || socketRef.current.readyState === WebSocket.CLOSED) {\n        const newSocket = new WebSocket(url);\n        socketRef.current = newSocket;\n        newSocket.onopen = () => {\n          console.log(\"WebSocket reconnected successfully.\");\n          socketRef.current.send(message);\n        };\n      }\n    }\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n    if (isLoggedInRef.current) {\n      console.log(\"User is already logged in.\");\n      return;\n    }\n  };\n  const addUser = username => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"ADD_USER\",\n        data: {\n          user: username\n        }\n      }\n    }));\n  };\n  return {\n    messages,\n    sendMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"Ownf95nUBraa7aC17lzdjrP7xAY=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","currentUser","_s","socketRef","isConnectedRef","isLoggedInRef","messages","setMessages","users","setUsers","url","current","newSocket","WebSocket","onopen","console","log","loginUser","username","password","error","onmessage","event","data","receivedMessage","JSON","parse","prevMessages","status","onclose","readyState","OPEN","close","sendMessage","message","send","CLOSED","stringify","action","user","pass","addUser"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const socketRef = useRef(null);\r\n  const isConnectedRef = useRef(false);\r\n  const isLoggedInRef = useRef(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  // WebSocket URL\r\n  const url = 'wss://your-websocket-url';\r\n\r\n  useEffect(() => {\r\n    if (!socketRef.current && currentUser) {\r\n      const newSocket = new WebSocket(url);\r\n      socketRef.current = newSocket;\r\n\r\n      newSocket.onopen = () => {\r\n        if (!isConnectedRef.current) {\r\n          console.log(\"WebSocket connected successfully.\");\r\n          isConnectedRef.current = true;\r\n          if (currentUser) {\r\n            loginUser(currentUser.username, currentUser.password);\r\n          } else {\r\n            console.error(\"currentUser is undefined.\");\r\n          }\r\n        }\r\n      };\r\n\r\n      newSocket.onmessage = (event) => {\r\n        console.log('Received message from server:', event.data);\r\n        try {\r\n          const receivedMessage = JSON.parse(event.data);\r\n          console.log('Parsed message:', receivedMessage);\r\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\r\n\r\n          if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\r\n            isLoggedInRef.current = true;\r\n          }\r\n        } catch (error) {\r\n          console.error('Failed to parse message from the server:', error);\r\n        }\r\n      };\r\n\r\n      newSocket.onclose = () => {\r\n        console.log(\"WebSocket closed.\");\r\n        socketRef.current = null;\r\n        isConnectedRef.current = false;\r\n      };\r\n\r\n      return () => {\r\n        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n          socketRef.current.close();\r\n        }\r\n      };\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n      // Try reconnecting the WebSocket if it's not open\r\n      if (!socketRef.current || socketRef.current.readyState === WebSocket.CLOSED) {\r\n        const newSocket = new WebSocket(url);\r\n        socketRef.current = newSocket;\r\n        newSocket.onopen = () => {\r\n          console.log(\"WebSocket reconnected successfully.\");\r\n          socketRef.current.send(message);\r\n        };\r\n      }\r\n    }\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    if (isLoggedInRef.current) {\r\n      console.log(\"User is already logged in.\");\r\n      return;\r\n    }\r\n  };\r\n\r\n  const addUser = (username) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"ADD_USER\",\r\n          data: { user: username }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    sendMessage,\r\n    users,\r\n    addUser,\r\n  };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}