{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState, useCallback } from 'react';\nconst useWebSocket = currentUser => {\n  _s();\n  const socketRef = useRef(null);\n  const isConnectedRef = useRef(false);\n  const isLoggedInRef = useRef(false);\n  const [messages, setMessages] = useState([]);\n  const [authenticated, setAuthenticated] = useState(false);\n\n  // WebSocket URL\n  const url = 'wss://your-websocket-url';\n  const sendMessage = useCallback(message => {\n    if (authenticated && socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open or user is not authenticated.\");\n    }\n  }, [authenticated]);\n  const loginUser = useCallback((username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  }, [sendMessage]);\n  useEffect(() => {\n    if (!socketRef.current && currentUser) {\n      const newSocket = new WebSocket(url);\n      socketRef.current = newSocket;\n      newSocket.onopen = () => {\n        if (!isConnectedRef.current) {\n          console.log(\"WebSocket connected successfully.\");\n          isConnectedRef.current = true;\n          if (currentUser) {\n            loginUser(currentUser.username, currentUser.password);\n          }\n        }\n      };\n      newSocket.onmessage = event => {\n        const receivedMessage = JSON.parse(event.data);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        if (receivedMessage.event === \"LOGIN\") {\n          if (receivedMessage.status === \"success\") {\n            isLoggedInRef.current = true;\n            setAuthenticated(true);\n            console.log(\"User logged in successfully.\");\n          } else {\n            console.error(\"Login failed:\", receivedMessage.mes);\n          }\n        } else if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\") {\n          console.error(\"Authentication error:\", receivedMessage.mes);\n          setAuthenticated(false);\n        }\n      };\n      newSocket.onclose = () => {\n        console.log(\"WebSocket closed.\");\n        socketRef.current = null;\n        isConnectedRef.current = false;\n        isLoggedInRef.current = false;\n        setAuthenticated(false);\n      };\n      return () => {\n        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n          socketRef.current.close();\n        }\n      };\n    }\n  }, [currentUser, loginUser]);\n  const addUser = username => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"ADD_USER\",\n        data: {\n          user: username\n        }\n      }\n    }));\n  };\n  return {\n    messages,\n    sendMessage,\n    addUser\n  };\n};\n_s(useWebSocket, \"NBQGKAApQTLEKVzRIUoOUEL+52c=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","useWebSocket","currentUser","_s","socketRef","isConnectedRef","isLoggedInRef","messages","setMessages","authenticated","setAuthenticated","url","sendMessage","message","current","readyState","WebSocket","OPEN","send","console","error","loginUser","username","password","JSON","stringify","action","data","event","user","pass","newSocket","onopen","log","onmessage","receivedMessage","parse","prevMessages","status","mes","onclose","close","addUser"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const socketRef = useRef(null);\r\n  const isConnectedRef = useRef(false);\r\n  const isLoggedInRef = useRef(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [authenticated, setAuthenticated] = useState(false);\r\n\r\n  // WebSocket URL\r\n  const url = 'wss://your-websocket-url';\r\n\r\n  const sendMessage = useCallback((message) => {\r\n    if (authenticated && socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open or user is not authenticated.\");\r\n    }\r\n  }, [authenticated]);\r\n\r\n  const loginUser = useCallback((username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  }, [sendMessage]);\r\n\r\n  useEffect(() => {\r\n    if (!socketRef.current && currentUser) {\r\n      const newSocket = new WebSocket(url);\r\n      socketRef.current = newSocket;\r\n\r\n      newSocket.onopen = () => {\r\n        if (!isConnectedRef.current) {\r\n          console.log(\"WebSocket connected successfully.\");\r\n          isConnectedRef.current = true;\r\n          if (currentUser) {\r\n            loginUser(currentUser.username, currentUser.password);\r\n          }\r\n        }\r\n      };\r\n\r\n      newSocket.onmessage = (event) => {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n\r\n        if (receivedMessage.event === \"LOGIN\") {\r\n          if (receivedMessage.status === \"success\") {\r\n            isLoggedInRef.current = true;\r\n            setAuthenticated(true);\r\n            console.log(\"User logged in successfully.\");\r\n          } else {\r\n            console.error(\"Login failed:\", receivedMessage.mes);\r\n          }\r\n        } else if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\") {\r\n          console.error(\"Authentication error:\", receivedMessage.mes);\r\n          setAuthenticated(false);\r\n        }\r\n      };\r\n\r\n      newSocket.onclose = () => {\r\n        console.log(\"WebSocket closed.\");\r\n        socketRef.current = null;\r\n        isConnectedRef.current = false;\r\n        isLoggedInRef.current = false;\r\n        setAuthenticated(false);\r\n      };\r\n\r\n      return () => {\r\n        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n          socketRef.current.close();\r\n        }\r\n      };\r\n    }\r\n  }, [currentUser, loginUser]);\r\n\r\n  const addUser = (username) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"ADD_USER\",\r\n          data: { user: username },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    sendMessage,\r\n    addUser,\r\n  };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}