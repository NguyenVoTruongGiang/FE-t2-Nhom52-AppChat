{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState(() => {\n    const userKey = currentUser ? `users_${currentUser}` : 'default_user';\n    const savedUsers = localStorage.getItem(userKey);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const socketRef = useRef(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  const isLoggedInRef = useRef(false);\n  const connectWebSocket = () => {\n    socketRef.current = new WebSocket(url);\n    socketRef.current.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n      if (currentUser && !isLoggedInRef.current) {\n        loginUser(currentUser); // Gửi yêu cầu đăng nhập ngay sau khi kết nối thành công\n      }\n    };\n    socketRef.current.onmessage = event => {\n      console.log(\"Received message from server:\", event.data);\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        console.log(\"Parsed message:\", receivedMessage);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\n          console.log(\"User logged in successfully.\");\n          isLoggedInRef.current = true;\n        }\n        if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\") {\n          console.log(\"User not authenticated.\");\n          // Handle re-authentication logic here if needed\n        }\n      } catch (error) {\n        console.error(\"Failed to parse message from the server:\", error);\n      }\n    };\n    socketRef.current.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n      isLoggedInRef.current = false;\n      // Attempt to reconnect\n      setTimeout(connectWebSocket, 5000);\n    };\n  };\n  useEffect(currentUser => {\n    if (currentUser) {\n      connectWebSocket();\n    }\n    return () => {\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n        socketRef.current.close();\n      }\n    };\n  }, [currentUser]);\n  useEffect(() => {\n    if (currentUser) {\n      const userKey = `users_${currentUser}`;\n      localStorage.setItem(userKey, JSON.stringify(users));\n      console.log(currentUser);\n    }\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password = null) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (to, message, type = \"people\") => {\n    if (!isLoggedInRef.current) {\n      console.error(\"User not logged in.\");\n      return;\n    }\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type,\n          to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"48ifujJIs51Qyn6YAj5bCsklZjA=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","currentUser","_s","messages","setMessages","users","setUsers","userKey","savedUsers","localStorage","getItem","JSON","parse","socketRef","url","isLoggedInRef","connectWebSocket","current","WebSocket","onopen","console","log","loginUser","onmessage","event","data","receivedMessage","prevMessages","status","error","onclose","setTimeout","readyState","OPEN","close","setItem","stringify","sendMessage","message","send","registerUser","username","password","action","user","pass","sendChatMessage","to","type","mes","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState(() => {\r\n    const userKey = currentUser ? `users_${currentUser}` : 'default_user';\r\n    const savedUsers = localStorage.getItem(userKey);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const socketRef = useRef(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n  const isLoggedInRef = useRef(false);\r\n\r\n  const connectWebSocket = () => {\r\n    socketRef.current = new WebSocket(url);\r\n\r\n    socketRef.current.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n      if (currentUser && !isLoggedInRef.current) {\r\n        loginUser(currentUser);  // Gửi yêu cầu đăng nhập ngay sau khi kết nối thành công\r\n      }\r\n    };\r\n\r\n    socketRef.current.onmessage = (event) => {\r\n      console.log(\"Received message from server:\", event.data);\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        console.log(\"Parsed message:\", receivedMessage);\r\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\r\n\r\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\r\n          console.log(\"User logged in successfully.\");\r\n          isLoggedInRef.current = true;\r\n        }\r\n\r\n        if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\") {\r\n          console.log(\"User not authenticated.\");\r\n          // Handle re-authentication logic here if needed\r\n        }\r\n\r\n      } catch (error) {\r\n        console.error(\"Failed to parse message from the server:\", error);\r\n      }\r\n    };\r\n\r\n    socketRef.current.onclose = () => {\r\n      console.log(\"WebSocket connection closed.\");\r\n      isLoggedInRef.current = false;\r\n      // Attempt to reconnect\r\n      setTimeout(connectWebSocket, 5000);\r\n    };\r\n  };\r\n\r\n  useEffect((currentUser) => {\r\n    if (currentUser) {\r\n      connectWebSocket();\r\n    }\r\n\r\n    return () => {\r\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n        socketRef.current.close();\r\n      }\r\n    };\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    if(currentUser) {\r\n      const userKey = `users_${currentUser}`;\r\n      localStorage.setItem(userKey, JSON.stringify(users));\r\n      console.log(currentUser);\r\n    }\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"REGISTER\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password = null) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (to, message, type = \"people\") => {\r\n    if (!isLoggedInRef.current) {\r\n      console.error(\"User not logged in.\");\r\n      return;\r\n    }\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type,\r\n            to,\r\n            mes: message\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers(prevUsers => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}