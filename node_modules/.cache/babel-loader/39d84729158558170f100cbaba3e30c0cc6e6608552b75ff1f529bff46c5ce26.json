{"ast":null,"code":"var _jsxFileName = \"D:\\\\demoReact\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport EmojiPicker from 'emoji-picker-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [socket, setSocket] = useState(null); // State to hold WebSocket instance\n  const [selectedEmoji, setSelectedEmoji] = useState(null);\n  useEffect(() => {\n    const newSocket = new WebSocket(\"ws://localhost:3000\");\n    setSocket(newSocket);\n    newSocket.onopen = () => {\n      console.log(\"WebSocket connection established.\");\n    };\n    newSocket.onmessage = event => {\n      const receivedMessage = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, receivedMessage]);\n    };\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  const sendMessage = () => {\n    if ((messageInput.trim() !== \"\" || selectedEmoji !== null) && socket && socket.readyState === WebSocket.OPEN) {\n      const message = {\n        text: messageInput + (selectedEmoji ? ` ${selectedEmoji}` : \"\"),\n        timestamp: new Date().toISOString(),\n        sender: \"me\" // Xác định tin nhắn được gửi từ bản thân\n      };\n      socket.send(JSON.stringify(message));\n      setMessageInput(\"\");\n      setSelectedEmoji(null);\n      // Hiển thị tin nhắn đã gửi ngay sau khi gửi\n      setMessages(prevMessages => [...prevMessages, message]);\n    } else {\n      console.error(\"WebSocket connection is not established yet or is not in OPEN state.\");\n    }\n  };\n  const handleEmojiClick = (event, emojiObject) => {\n    setSelectedEmoji(emojiObject.emoji);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender === 'me' ? 'me' : 'you'}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(EmojiPicker, {\n          onEmojiClick: handleEmojiClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message....\",\n          value: messageInput,\n          onChange: e => setMessageInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tbSYLEIpztdlUdVek6NChGx5KJk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","EmojiPicker","jsxDEV","_jsxDEV","App","_s","messages","setMessages","messageInput","setMessageInput","socket","setSocket","selectedEmoji","setSelectedEmoji","newSocket","WebSocket","onopen","console","log","onmessage","event","receivedMessage","JSON","parse","data","prevMessages","close","sendMessage","trim","readyState","OPEN","message","text","timestamp","Date","toISOString","sender","send","stringify","error","handleEmojiClick","emojiObject","emoji","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onEmojiClick","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/demoReact/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport EmojiPicker from 'emoji-picker-react';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [socket, setSocket] = useState(null); // State to hold WebSocket instance\n  const [selectedEmoji, setSelectedEmoji] = useState(null);\n\n  useEffect(() => {\n    const newSocket = new WebSocket(\"ws://localhost:3000\");\n    setSocket(newSocket);\n\n    newSocket.onopen = () => {\n      console.log(\"WebSocket connection established.\");\n    };\n    newSocket.onmessage = (event) => {\n      const receivedMessage = JSON.parse(event.data);\n      setMessages((prevMessages) => [...prevMessages, receivedMessage]);\n    };    \n\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  const sendMessage = () => {\n    if (\n      (messageInput.trim() !== \"\" || selectedEmoji !== null) &&\n      socket &&\n      socket.readyState === WebSocket.OPEN\n    ) {\n\n      const message = {\n        text: messageInput + (selectedEmoji ? ` ${selectedEmoji}` : \"\"),\n        timestamp: new Date().toISOString(),\n        sender: \"me\", // Xác định tin nhắn được gửi từ bản thân\n      };\n      socket.send(JSON.stringify(message));\n      setMessageInput(\"\");\n      setSelectedEmoji(null);\n      // Hiển thị tin nhắn đã gửi ngay sau khi gửi\n      setMessages((prevMessages) => [...prevMessages, message]);\n    } else {\n      console.error(\n        \"WebSocket connection is not established yet or is not in OPEN state.\"\n      );\n    }\n  };\n\n  const handleEmojiClick = (event, emojiObject) => {\n    setSelectedEmoji(emojiObject.emoji);\n  };  \n  \n  return (\n    <div className=\"App\">\n      <div className=\"chat-container\">\n        <div className=\"chat-messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender === 'me' ? 'me' : 'you'}`}>\n              {message.text}\n            </div>          \n          ))}\n        </div>\n        <div className=\"chat-input\">\n          <EmojiPicker onEmojiClick={handleEmojiClick} />\n          <input\n            type=\"text\"\n            placeholder=\"Type your message....\"\n            value={messageInput}\n            onChange={(e) => setMessageInput(e.target.value)}\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}