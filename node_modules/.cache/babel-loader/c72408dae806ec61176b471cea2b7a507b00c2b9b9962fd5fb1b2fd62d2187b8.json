{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const messagesRef = useRef([]);\n  const usersRef = useRef(() => {\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const socketRef = useRef(null);\n  const isConnectedRef = useRef(false);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    if (!socketRef.current) {\n      const newSocket = new WebSocket(url);\n      socketRef.current = newSocket;\n      newSocket.onopen = () => {\n        if (!isConnectedRef.current) {\n          console.log(\"WebSocket connected successfully.\");\n          isConnectedRef.current = true;\n        }\n      };\n      newSocket.onmessage = event => {\n        console.log('Received message from server:', event.data);\n        try {\n          const receivedMessage = JSON.parse(event.data);\n          console.log('Parsed message:', receivedMessage);\n          messagesRef.current = [...messagesRef.current, receivedMessage];\n        } catch (error) {\n          console.error('Failed to parse message from the server:', error);\n        }\n      };\n      newSocket.onclose = () => {\n        console.log(\"WebSocket closed.\");\n        socketRef.current = null;\n        isConnectedRef.current = false;\n      };\n      return () => {\n        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n          socketRef.current.close();\n        }\n      };\n    }\n  }, [currentUser]); // Only connect/disconnect when currentUser changes\n\n  useEffect(() => {\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(usersRef.current()));\n  }, [usersRef, currentUser]);\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n\n  // Other functions...\n\n  return {\n    messages: messagesRef.current,\n    sendMessage /* other functions */\n  };\n};\n_s(useWebSocket, \"7YpBFbrPJfRwFCrqExJgMGmyDas=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useWebSocket","currentUser","_s","messagesRef","usersRef","savedUsers","localStorage","getItem","JSON","parse","socketRef","isConnectedRef","url","current","newSocket","WebSocket","onopen","console","log","onmessage","event","data","receivedMessage","error","onclose","readyState","OPEN","close","setItem","stringify","sendMessage","message","send","messages"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const messagesRef = useRef([]);\r\n  const usersRef = useRef(() => {\r\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const socketRef = useRef(null);\r\n  const isConnectedRef = useRef(false);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    if (!socketRef.current) {\r\n      const newSocket = new WebSocket(url);\r\n      socketRef.current = newSocket;\r\n\r\n      newSocket.onopen = () => {\r\n        if (!isConnectedRef.current) {\r\n          console.log(\"WebSocket connected successfully.\");\r\n          isConnectedRef.current = true;\r\n        }\r\n      };\r\n\r\n      newSocket.onmessage = (event) => {\r\n        console.log('Received message from server:', event.data);\r\n        try {\r\n          const receivedMessage = JSON.parse(event.data);\r\n          console.log('Parsed message:', receivedMessage);\r\n          messagesRef.current = [...messagesRef.current, receivedMessage];\r\n        } catch (error) {\r\n          console.error('Failed to parse message from the server:', error);\r\n        }\r\n      };\r\n\r\n      newSocket.onclose = () => {\r\n        console.log(\"WebSocket closed.\");\r\n        socketRef.current = null;\r\n        isConnectedRef.current = false;\r\n      };\r\n\r\n      return () => {\r\n        if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n          socketRef.current.close();\r\n        }\r\n      };\r\n    }\r\n  }, [currentUser]); // Only connect/disconnect when currentUser changes\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(usersRef.current()));\r\n  }, [usersRef, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  // Other functions...\r\n\r\n  return { messages: messagesRef.current, sendMessage, /* other functions */ };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}