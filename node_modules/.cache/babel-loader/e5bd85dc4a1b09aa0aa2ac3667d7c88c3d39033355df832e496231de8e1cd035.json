{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [users, setUsers] = useState(() => {\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    // Chỉ tạo kết nối mới nếu chưa có kết nối\n    if (!socket) {\n      const newSocket = new WebSocket(url);\n      setSocket(newSocket);\n      newSocket.onopen = () => {\n        console.log(\"WebSocket connected successfully.\");\n      };\n      newSocket.onmessage = event => {\n        console.log('Received message from server:', event.data);\n        try {\n          const receivedMessage = JSON.parse(event.data);\n          console.log('Parsed message:', receivedMessage);\n          if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\" && receivedMessage.mes === \"User not Login\") {\n            console.log(\"User not logged in. Redirect or display login prompt.\");\n            return;\n          }\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        } catch (error) {\n          console.error('Failed to send message to the server:', error);\n        }\n      };\n      newSocket.onclose = () => {\n        console.log(\"WebSocket closed.\");\n        setSocket(null); // Đảm bảo đặt giá trị null khi kết nối đóng\n      };\n    }\n    return () => {\n      // Không cần đóng kết nối ở đây vì sẽ đóng kết nối trong newSocket.onclose\n    };\n  }, [socket, url]); // socket và url sẽ thay đổi khi effect được gọi lại\n\n  useEffect(() => {\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type: type,\n          to: to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"ObplpR7DU9Ctu624eisBvpkPgsc=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useWebSocket","currentUser","_s","messages","setMessages","socket","setSocket","users","setUsers","savedUsers","localStorage","getItem","JSON","parse","url","newSocket","WebSocket","onopen","console","log","onmessage","event","data","receivedMessage","status","mes","prevMessages","error","onclose","setItem","stringify","sendMessage","message","readyState","OPEN","send","registerUser","username","password","action","user","pass","loginUser","sendChatMessage","type","to","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const [users, setUsers] = useState(() => {\r\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    // Chỉ tạo kết nối mới nếu chưa có kết nối\r\n    if (!socket) {\r\n      const newSocket = new WebSocket(url);\r\n      setSocket(newSocket);\r\n\r\n      newSocket.onopen = () => {\r\n        console.log(\"WebSocket connected successfully.\");\r\n      };\r\n\r\n      newSocket.onmessage = (event) => {\r\n        console.log('Received message from server:', event.data);\r\n        try {\r\n          const receivedMessage = JSON.parse(event.data);\r\n          console.log('Parsed message:', receivedMessage);\r\n          \r\n          if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\" && receivedMessage.mes === \"User not Login\") {\r\n            console.log(\"User not logged in. Redirect or display login prompt.\");\r\n            return;\r\n          }\r\n\r\n          setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n        } catch (error) {\r\n          console.error('Failed to send message to the server:', error);\r\n        }\r\n      };\r\n\r\n      newSocket.onclose = () => {\r\n        console.log(\"WebSocket closed.\");\r\n        setSocket(null); // Đảm bảo đặt giá trị null khi kết nối đóng\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      // Không cần đóng kết nối ở đây vì sẽ đóng kết nối trong newSocket.onclose\r\n    };\r\n  }, [socket, url]); // socket và url sẽ thay đổi khi effect được gọi lại\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"REGISTER\", \r\n          data: { \r\n            user: username, \r\n            pass: password \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"LOGIN\", \r\n          data: { \r\n            user: username, \r\n            pass: password \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"SEND_CHAT\", \r\n          data: { \r\n            type: type,\r\n            to: to,\r\n            mes: message \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers((prevUsers) => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}