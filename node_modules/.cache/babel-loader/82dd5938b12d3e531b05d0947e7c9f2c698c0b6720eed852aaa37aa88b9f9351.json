{"ast":null,"code":"var _jsxFileName = \"D:\\\\demoReact\\\\my-app\\\\src\\\\component\\\\MessageInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSmile } from '@fortawesome/free-solid-svg-icons';\nimport EmojiPicker from 'emoji-picker-react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MessageInput({\n  sendMessage,\n  selectedUser\n}) {\n  _s();\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [selectedEmoji, setSelectedEmoji] = useState(null);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const handleEmojiClick = (event, emojiObject) => {\n    setSelectedEmoji(emojiObject.emoji);\n  };\n  const handleClickSend = () => {\n    if (selectedUser) {\n      const message = JSON.stringify({\n        action: 'onchat',\n        data: {\n          event: 'SEND_CHAT',\n          data: {\n            type: 'people',\n            to: selectedUser,\n            mes: messageInput + (selectedEmoji || '')\n          }\n        }\n      });\n      sendMessage(message);\n      setMessageInput(\"\");\n      setSelectedEmoji(null);\n    } else {\n      alert('Please select a user to send the message.');\n    }\n  };\n  const toggleEmojiPicker = () => {\n    setShowEmojiPicker(!showEmojiPicker);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emoji-icon\",\n      onClick: toggleEmojiPicker,\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faSmile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(EmojiPicker, {\n      onEmojiClick: handleEmojiClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type your message....\",\n      value: messageInput,\n      onChange: e => setMessageInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"sendms\",\n      onClick: handleClickSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageInput, \"oT0OUNBKFWpWKST46vjjpHN6n74=\");\n_c = MessageInput;\nexport default MessageInput;\nvar _c;\n$RefreshReg$(_c, \"MessageInput\");","map":{"version":3,"names":["React","useState","FontAwesomeIcon","faSmile","EmojiPicker","jsxDEV","_jsxDEV","MessageInput","sendMessage","selectedUser","_s","messageInput","setMessageInput","selectedEmoji","setSelectedEmoji","showEmojiPicker","setShowEmojiPicker","handleEmojiClick","event","emojiObject","emoji","handleClickSend","message","JSON","stringify","action","data","type","to","mes","alert","toggleEmojiPicker","className","children","onClick","icon","fileName","_jsxFileName","lineNumber","columnNumber","onEmojiClick","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/demoReact/my-app/src/component/MessageInput.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSmile } from '@fortawesome/free-solid-svg-icons';\r\nimport EmojiPicker from 'emoji-picker-react';\r\nimport '../App.css';\r\n\r\nfunction MessageInput({ sendMessage, selectedUser }) {\r\n  const [messageInput, setMessageInput] = useState(\"\");\r\n  const [selectedEmoji, setSelectedEmoji] = useState(null);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n\r\n  const handleEmojiClick = (event, emojiObject) => {\r\n    setSelectedEmoji(emojiObject.emoji);\r\n  };\r\n\r\n  const handleClickSend = () => {\r\n    if (selectedUser) {\r\n      const message = JSON.stringify({\r\n        action: 'onchat',\r\n        data: {\r\n          event: 'SEND_CHAT',\r\n          data: {\r\n            type: 'people',\r\n            to: selectedUser,\r\n            mes: messageInput + (selectedEmoji || '')\r\n          }\r\n        }\r\n      });\r\n      sendMessage(message);\r\n      setMessageInput(\"\");\r\n      setSelectedEmoji(null);\r\n    } else {\r\n      alert('Please select a user to send the message.');\r\n    }\r\n  };\r\n\r\n  const toggleEmojiPicker = () => {\r\n    setShowEmojiPicker(!showEmojiPicker);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-input\">\r\n      <div className=\"emoji-icon\" onClick={toggleEmojiPicker}>\r\n        <FontAwesomeIcon icon={faSmile} />\r\n      </div>\r\n      {showEmojiPicker && <EmojiPicker onEmojiClick={handleEmojiClick} />}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type your message....\"\r\n        value={messageInput}\r\n        onChange={(e) => setMessageInput(e.target.value)}\r\n      />\r\n      <button className=\"sendms\" onClick={handleClickSend}>Send</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageInput;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,YAAYA,CAAC;EAAEC,WAAW;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMgB,gBAAgB,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;IAC/CL,gBAAgB,CAACK,WAAW,CAACC,KAAK,CAAC;EACrC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIZ,YAAY,EAAE;MAChB,MAAMa,OAAO,GAAGC,IAAI,CAACC,SAAS,CAAC;QAC7BC,MAAM,EAAE,QAAQ;QAChBC,IAAI,EAAE;UACJR,KAAK,EAAE,WAAW;UAClBQ,IAAI,EAAE;YACJC,IAAI,EAAE,QAAQ;YACdC,EAAE,EAAEnB,YAAY;YAChBoB,GAAG,EAAElB,YAAY,IAAIE,aAAa,IAAI,EAAE;UAC1C;QACF;MACF,CAAC,CAAC;MACFL,WAAW,CAACc,OAAO,CAAC;MACpBV,eAAe,CAAC,EAAE,CAAC;MACnBE,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLgB,KAAK,CAAC,2CAA2C,CAAC;IACpD;EACF,CAAC;EAED,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9Bf,kBAAkB,CAAC,CAACD,eAAe,CAAC;EACtC,CAAC;EAED,oBACET,OAAA;IAAK0B,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzB3B,OAAA;MAAK0B,SAAS,EAAC,YAAY;MAACE,OAAO,EAAEH,iBAAkB;MAAAE,QAAA,eACrD3B,OAAA,CAACJ,eAAe;QAACiC,IAAI,EAAEhC;MAAQ;QAAAiC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,EACLxB,eAAe,iBAAIT,OAAA,CAACF,WAAW;MAACoC,YAAY,EAAEvB;IAAiB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnEjC,OAAA;MACEqB,IAAI,EAAC,MAAM;MACXc,WAAW,EAAC,uBAAuB;MACnCC,KAAK,EAAE/B,YAAa;MACpBgC,QAAQ,EAAGC,CAAC,IAAKhC,eAAe,CAACgC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACFjC,OAAA;MAAQ0B,SAAS,EAAC,QAAQ;MAACE,OAAO,EAAEb,eAAgB;MAAAY,QAAA,EAAC;IAAI;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEV;AAAC7B,EAAA,CAjDQH,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAmDrB,eAAeA,YAAY;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}