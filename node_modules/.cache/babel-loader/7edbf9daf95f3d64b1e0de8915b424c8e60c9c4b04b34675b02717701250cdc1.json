{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const socketRef = useRef(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  const [isConnected, setIsConnected] = useState(false);\n  const [messagesQueue, setMessagesQueue] = useState([]);\n  useEffect(() => {\n    if (!isConnected) {\n      console.log(\"Connecting to WebSocket...\");\n      socketRef.current = new WebSocket(url);\n      socketRef.current.onopen = () => {\n        console.log(\"WebSocket connected successfully.\");\n        setIsConnected(true);\n        // Xử lý tin nhắn trong hàng đợi nếu có\n        if (messagesQueue.length > 0) {\n          messagesQueue.forEach(message => {\n            socketRef.current.send(message);\n          });\n          setMessagesQueue([]);\n        }\n      };\n      socketRef.current.onmessage = event => {\n        console.log(\"Received message from server:\", event.data);\n        try {\n          const receivedMessage = JSON.parse(event.data);\n          console.log(\"Parsed message:\", receivedMessage);\n          setMessages(prevMessages => [...prevMessages, receivedMessage]);\n          if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\n            console.log(\"User logged in successfully.\");\n          }\n        } catch (error) {\n          console.error(\"Failed to parse message from the server:\", error);\n        }\n      };\n      socketRef.current.onclose = () => {\n        console.log(\"WebSocket connection closed. Reconnecting...\");\n        setIsConnected(false);\n        // Thực hiện kết nối lại sau một khoảng thời gian nhất định\n        setTimeout(() => {\n          setIsConnected(true);\n        }, 3000);\n      };\n    }\n    return () => {\n      console.log(\"Closing WebSocket connection...\");\n      socketRef.current.close();\n      setIsConnected(false);\n    };\n  }, [isConnected, messagesQueue]);\n  const sendMessage = message => {\n    if (isConnected) {\n      console.log(\"Sending message:\", message);\n      socketRef.current.send(message);\n    } else {\n      console.log(\"WebSocket is not connected. Queueing message:\", message);\n      // Nếu kết nối chưa mở, thêm tin nhắn vào hàng đợi\n      setMessagesQueue(prevQueue => [...prevQueue, message]);\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type,\n          to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    addUser,\n    users\n  };\n};\n_s(useWebSocket, \"2My6EOX8iwl6pcFpglJu1s+F6ss=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","currentUser","_s","messages","setMessages","users","setUsers","socketRef","url","isConnected","setIsConnected","messagesQueue","setMessagesQueue","console","log","current","WebSocket","onopen","length","forEach","message","send","onmessage","event","data","receivedMessage","JSON","parse","prevMessages","status","error","onclose","setTimeout","close","sendMessage","prevQueue","registerUser","username","password","stringify","action","user","pass","loginUser","sendChatMessage","type","to","mes","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const socketRef = useRef(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [messagesQueue, setMessagesQueue] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!isConnected) {\r\n      console.log(\"Connecting to WebSocket...\");\r\n      socketRef.current = new WebSocket(url);\r\n\r\n      socketRef.current.onopen = () => {\r\n        console.log(\"WebSocket connected successfully.\");\r\n        setIsConnected(true);\r\n        // Xử lý tin nhắn trong hàng đợi nếu có\r\n        if (messagesQueue.length > 0) {\r\n          messagesQueue.forEach((message) => {\r\n            socketRef.current.send(message);\r\n          });\r\n          setMessagesQueue([]);\r\n        }\r\n      };\r\n\r\n      socketRef.current.onmessage = (event) => {\r\n        console.log(\"Received message from server:\", event.data);\r\n        try {\r\n          const receivedMessage = JSON.parse(event.data);\r\n          console.log(\"Parsed message:\", receivedMessage);\r\n          setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n\r\n          if (\r\n            receivedMessage.event === \"LOGIN\" &&\r\n            receivedMessage.status === \"success\"\r\n          ) {\r\n            console.log(\"User logged in successfully.\");\r\n          }\r\n        } catch (error) {\r\n          console.error(\r\n            \"Failed to parse message from the server:\",\r\n            error\r\n          );\r\n        }\r\n      };\r\n\r\n      socketRef.current.onclose = () => {\r\n        console.log(\"WebSocket connection closed. Reconnecting...\");\r\n        setIsConnected(false);\r\n        // Thực hiện kết nối lại sau một khoảng thời gian nhất định\r\n        setTimeout(() => {\r\n          setIsConnected(true);\r\n        }, 3000);\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      console.log(\"Closing WebSocket connection...\");\r\n      socketRef.current.close();\r\n      setIsConnected(false);\r\n    };\r\n  }, [isConnected, messagesQueue]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (isConnected) {\r\n      console.log(\"Sending message:\", message);\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.log(\"WebSocket is not connected. Queueing message:\", message);\r\n      // Nếu kết nối chưa mở, thêm tin nhắn vào hàng đợi\r\n      setMessagesQueue((prevQueue) => [...prevQueue, message]);\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"REGISTER\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type,\r\n            to,\r\n            mes: message\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers((prevUsers) => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, addUser, users };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}