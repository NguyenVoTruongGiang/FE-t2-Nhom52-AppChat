{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState(() => {\n    const userKey = currentUser ? `users_${currentUser}` : 'default_user';\n    const savedUsers = localStorage.getItem(userKey);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const [loginCredentials, setLoginCredentials] = useState(null);\n  const socketRef = useRef(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    socketRef.current = new WebSocket(url);\n    socketRef.current.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n      if (loginCredentials) {\n        sendMessage(JSON.stringify({\n          action: \"onchat\",\n          data: {\n            event: \"LOGIN\",\n            data: {\n              user: loginCredentials.username,\n              pass: loginCredentials.password\n            }\n          }\n        }));\n      }\n    };\n    socketRef.current.onmessage = event => {\n      console.log(\"Received message from server:\", event.data);\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        console.log(\"Parsed message:\", receivedMessage);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\n          console.log(\"User logged in successfully.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to parse message from the server:\", error);\n      }\n    };\n    socketRef.current.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n    };\n    return () => {\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n        socketRef.current.close();\n      }\n    };\n  }, [url, loginCredentials]); // Cập nhật phụ thuộc vào loginCredentials\n\n  useEffect(() => {\n    if (currentUser) {\n      const userKey = `users_${currentUser}`;\n      localStorage.setItem(userKey, JSON.stringify(users));\n      console.log(currentUser);\n    }\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    setLoginCredentials({\n      username,\n      password\n    });\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (to, message, type = \"people\") => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type,\n          to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"gVGVb3FIbqgeHVFlTgsejxBmRno=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","currentUser","_s","messages","setMessages","users","setUsers","userKey","savedUsers","localStorage","getItem","JSON","parse","loginCredentials","setLoginCredentials","socketRef","url","current","WebSocket","onopen","console","log","sendMessage","stringify","action","data","event","user","username","pass","password","onmessage","receivedMessage","prevMessages","status","error","onclose","readyState","OPEN","close","setItem","message","send","registerUser","loginUser","sendChatMessage","to","type","mes","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState(() => {\r\n    const userKey = currentUser ? `users_${currentUser}` : 'default_user';\r\n    const savedUsers = localStorage.getItem(userKey);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const [loginCredentials, setLoginCredentials] = useState(null);\r\n  const socketRef = useRef(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket(url);\r\n\r\n    socketRef.current.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n      if (loginCredentials) {\r\n        sendMessage(\r\n          JSON.stringify({\r\n            action: \"onchat\",\r\n            data: {\r\n              event: \"LOGIN\",\r\n              data: {\r\n                user: loginCredentials.username,\r\n                pass: loginCredentials.password\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    };\r\n\r\n    socketRef.current.onmessage = (event) => {\r\n      console.log(\"Received message from server:\", event.data);\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        console.log(\"Parsed message:\", receivedMessage);\r\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\r\n\r\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\r\n          console.log(\"User logged in successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to parse message from the server:\", error);\r\n      }\r\n    };\r\n\r\n    socketRef.current.onclose = () => {\r\n      console.log(\"WebSocket connection closed.\");\r\n    };\r\n\r\n    return () => {\r\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n        socketRef.current.close();\r\n      }\r\n    };\r\n  }, [url, loginCredentials]); // Cập nhật phụ thuộc vào loginCredentials\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const userKey = `users_${currentUser}`;\r\n      localStorage.setItem(userKey, JSON.stringify(users));\r\n      console.log(currentUser);\r\n    }\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"REGISTER\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    setLoginCredentials({ username, password });\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (to, message, type = \"people\") => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: { type, to, mes: message }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers(prevUsers => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}