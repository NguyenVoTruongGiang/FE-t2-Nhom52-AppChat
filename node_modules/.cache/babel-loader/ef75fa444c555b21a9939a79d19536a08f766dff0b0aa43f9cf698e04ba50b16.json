{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState(() => {\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const socketRef = useRef(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    socketRef.current = new WebSocket(url);\n    socketRef.current.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n    };\n    socketRef.current.onmessage = event => {\n      console.log(\"Received message from server:\", event.data);\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        console.log(\"Parsed message:\", receivedMessage);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\n          console.log(\"User logged in successfully.\");\n        }\n      } catch (error) {\n        console.error(\"Failed to parse message from the server:\", error);\n      }\n    };\n    socketRef.current.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n    };\n    return () => {\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n        socketRef.current.close();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type,\n          to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"3nmClq5v8z4za3sdtbsKX6P44Mc=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","currentUser","_s","messages","setMessages","users","setUsers","savedUsers","localStorage","getItem","JSON","parse","socketRef","url","current","WebSocket","onopen","console","log","onmessage","event","data","receivedMessage","prevMessages","status","error","onclose","readyState","OPEN","close","setItem","stringify","sendMessage","message","send","registerUser","username","password","action","user","pass","loginUser","sendChatMessage","type","to","mes","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState(() => {\r\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const socketRef = useRef(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket(url);\r\n\r\n    socketRef.current.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n    };\r\n\r\n    socketRef.current.onmessage = (event) => {\r\n      console.log(\"Received message from server:\", event.data);\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        console.log(\"Parsed message:\", receivedMessage);\r\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\r\n\r\n        if (receivedMessage.event === \"LOGIN\" && receivedMessage.status === \"success\") {\r\n          console.log(\"User logged in successfully.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to parse message from the server:\", error);\r\n      }\r\n    };\r\n\r\n    socketRef.current.onclose = () => {\r\n      console.log(\"WebSocket connection closed.\");\r\n    };\r\n\r\n    return () => {\r\n      if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n        socketRef.current.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"REGISTER\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type,\r\n            to,\r\n            mes: message\r\n          }\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers(prevUsers => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser };\r\n};\r\n\r\nexport default useWebSocket;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}