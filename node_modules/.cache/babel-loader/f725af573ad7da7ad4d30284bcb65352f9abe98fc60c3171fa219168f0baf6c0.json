{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [users, setUsers] = useState(() => {\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  const isInitialMount = useRef(true); // Biến tham chiếu để kiểm tra lần render đầu tiên\n\n  useEffect(() => {\n    const newSocket = new WebSocket(url);\n    setSocket(newSocket);\n    newSocket.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n    };\n    newSocket.onmessage = event => {\n      console.log('Received message from server:', event.data);\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        console.log('Parsed message:', receivedMessage);\n        if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\" && receivedMessage.mes === \"User not Login\") {\n          console.log(\"User not logged in. Redirect or display login prompt.\");\n          return;\n        }\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n      } catch (error) {\n        console.error('Failed to send message to the server:', error);\n      }\n    };\n    newSocket.onclose = () => {\n      console.log(\"WebSocket closed.\");\n    };\n    return () => {\n      if (!isInitialMount.current && newSocket) {\n        // Đảm bảo đóng kết nối WebSocket chỉ khi không phải lần render đầu tiên\n        newSocket.close();\n      }\n      isInitialMount.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type: type,\n          to: to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const addUser = user => {\n    setUsers(prevUsers => [...prevUsers, user]);\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    addUser\n  };\n};\n_s(useWebSocket, \"ILRqzZoWGTarElnzhfRMGkIqSR4=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useRef","useWebSocket","currentUser","_s","messages","setMessages","socket","setSocket","users","setUsers","savedUsers","localStorage","getItem","JSON","parse","url","isInitialMount","newSocket","WebSocket","onopen","console","log","onmessage","event","data","receivedMessage","status","mes","prevMessages","error","onclose","current","close","setItem","stringify","sendMessage","message","readyState","OPEN","send","registerUser","username","password","action","user","pass","loginUser","sendChatMessage","type","to","addUser","prevUsers"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const [users, setUsers] = useState(() => {\r\n    const savedUsers = localStorage.getItem(`users_${currentUser}`);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n  const isInitialMount = useRef(true); // Biến tham chiếu để kiểm tra lần render đầu tiên\r\n\r\n  useEffect(() => {\r\n    const newSocket = new WebSocket(url);\r\n    setSocket(newSocket);\r\n\r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      console.log('Received message from server:', event.data);\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        console.log('Parsed message:', receivedMessage);\r\n        \r\n        if (receivedMessage.event === \"AUTH\" && receivedMessage.status === \"error\" && receivedMessage.mes === \"User not Login\") {\r\n          console.log(\"User not logged in. Redirect or display login prompt.\");\r\n          return;\r\n        }\r\n\r\n        setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n      } catch (error) {\r\n        console.error('Failed to send message to the server:', error);\r\n      }\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket closed.\");\r\n    };\r\n\r\n    return () => {\r\n      if (!isInitialMount.current && newSocket) { // Đảm bảo đóng kết nối WebSocket chỉ khi không phải lần render đầu tiên\r\n        newSocket.close();\r\n      }\r\n      isInitialMount.current = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`users_${currentUser}`, JSON.stringify(users));\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"REGISTER\", \r\n          data: { \r\n            user: username, \r\n            pass: password \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"LOGIN\", \r\n          data: { \r\n            user: username, \r\n            pass: password \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { \r\n          event: \"SEND_CHAT\", \r\n          data: { \r\n            type: type,\r\n            to: to,\r\n            mes: message \r\n          } \r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const addUser = (user) => {\r\n    setUsers((prevUsers) => [...prevUsers, user]);\r\n  };\r\n\r\n  return { messages, sendMessage, registerUser, loginUser, sendChatMessage, users, addUser };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}