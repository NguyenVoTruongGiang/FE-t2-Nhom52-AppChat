{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useWebSocket = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [clientUUID, setClientUUID] = useState(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    const newSocket = new WebSocket(url);\n    setSocket(newSocket);\n    newSocket.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n    };\n    newSocket.onmessage = event => {\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        if (receivedMessage.event) {\n          if (receivedMessage.event === \"RE_LOGIN\") {\n            setClientUUID(receivedMessage.data.RE_LOGIN_CODE);\n          } else {\n            setMessages(prevMessages => [...prevMessages, receivedMessage]);\n          }\n        } else if (receivedMessage.status) {\n          if (receivedMessage.status === \"error\") {\n            console.error(\"Error:\", receivedMessage.mes);\n          } else if (receivedMessage.status === \"success\") {\n            console.log(\"Success:\", receivedMessage.data);\n          }\n        } else {\n          console.error(\"Tin nhắn nhận được có cấu trúc không hợp lệ:\", receivedMessage);\n        }\n      } catch (error) {\n        console.error(\"không gửi được tin lên server:\", error);\n      }\n    };\n    newSocket.onclose = () => {\n      console.log(\"WebSocket closed.\");\n    };\n    return () => {\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\n        newSocket.close();\n      }\n    };\n  }, []);\n  const sendMessage = message => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const reLoginUser = (username, code) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"RE_LOGIN\",\n        data: {\n          user: username,\n          code: code\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type,\n          to,\n          mes: message\n        }\n      }\n    }));\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    reLoginUser,\n    sendChatMessage,\n    clientUUID\n  };\n};\n_s(useWebSocket, \"g7cQQ4iWOfJmd+zgLBoeclcDwL8=\");\nexport default useWebSocket;","map":{"version":3,"names":["useState","useEffect","useWebSocket","_s","messages","setMessages","socket","setSocket","clientUUID","setClientUUID","url","newSocket","WebSocket","onopen","console","log","onmessage","event","receivedMessage","JSON","parse","data","RE_LOGIN_CODE","prevMessages","status","error","mes","onclose","readyState","OPEN","close","sendMessage","message","send","registerUser","username","password","stringify","action","user","pass","loginUser","reLoginUser","code","sendChatMessage","type","to"],"sources":["D:/demoReact/my-app/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useWebSocket = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const [clientUUID, setClientUUID] = useState(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n\r\n  useEffect(() => {\r\n    const newSocket = new WebSocket(url);\r\n    setSocket(newSocket);\r\n\r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n    };\r\n\r\n    newSocket.onmessage = (event) => {\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        if (receivedMessage.event) {\r\n          if (receivedMessage.event === \"RE_LOGIN\") {\r\n            setClientUUID(receivedMessage.data.RE_LOGIN_CODE);\r\n          } else {\r\n            setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n          }\r\n        } else if (receivedMessage.status) {\r\n          if (receivedMessage.status === \"error\") {\r\n            console.error(\"Error:\", receivedMessage.mes);\r\n          } else if (receivedMessage.status === \"success\") {\r\n            console.log(\"Success:\", receivedMessage.data);\r\n          }\r\n        } else {\r\n          console.error(\"Tin nhắn nhận được có cấu trúc không hợp lệ:\", receivedMessage);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"không gửi được tin lên server:\", error);\r\n      }\r\n    };\r\n\r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket closed.\");\r\n    };\r\n\r\n    return () => {\r\n      if (newSocket && newSocket.readyState === WebSocket.OPEN) {\r\n        newSocket.close();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { event: \"REGISTER\", data: { user: username, pass: password } },\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { event: \"LOGIN\", data: { user: username, pass: password } },\r\n      })\r\n    );\r\n  };\r\n\r\n  const reLoginUser = (username, code) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { event: \"RE_LOGIN\", data: { user: username, code: code } },\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: { event: \"SEND_CHAT\", data: { type, to, mes: message } },\r\n      })\r\n    );\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    sendMessage,\r\n    registerUser,\r\n    loginUser,\r\n    reLoginUser,\r\n    sendChatMessage,\r\n    clientUUID,\r\n  };\r\n};\r\n\r\nexport default useWebSocket;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}