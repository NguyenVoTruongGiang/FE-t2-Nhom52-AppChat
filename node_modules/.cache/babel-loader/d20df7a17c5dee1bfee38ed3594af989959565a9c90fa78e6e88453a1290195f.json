{"ast":null,"code":"var _jsxFileName = \"D:\\\\demoReact\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState('');\n  const [socket, setSocket] = useState(null); // State to hold WebSocket instance\n\n  useEffect(() => {\n    const newSocket = new WebSocket('ws://localhost:3000');\n    setSocket(newSocket);\n    newSocket.onopen = () => {\n      console.log('WebSocket connection established.');\n    };\n    newSocket.onmessage = event => {\n      const receivedMessage = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, receivedMessage]);\n    };\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n  const sendMessage = () => {\n    if (messageInput.trim() !== '' && socket && socket.readyState === WebSocket.OPEN) {\n      const message = {\n        text: messageInput,\n        timestamp: new Date().toISOString()\n      };\n      socket.send(JSON.stringify(message));\n      setMessageInput('');\n    } else {\n      console.error('WebSocket connection is not established yet or is not in OPEN state.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your message....\",\n          value: messageInput,\n          onChange: e => setMessageInput(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"en3xtmEj5ckZEAPe8JKBtsiTYWo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","messages","setMessages","messageInput","setMessageInput","socket","setSocket","newSocket","WebSocket","onopen","console","log","onmessage","event","receivedMessage","JSON","parse","data","prevMessages","close","sendMessage","trim","readyState","OPEN","message","text","timestamp","Date","toISOString","send","stringify","error","className","children","map","index","sender","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/demoReact/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState('');\n  const [socket, setSocket] = useState(null); // State to hold WebSocket instance\n\n  useEffect(() => {\n    const newSocket = new WebSocket('ws://localhost:3000');\n    setSocket(newSocket);\n\n    newSocket.onopen = () => {\n      console.log('WebSocket connection established.');\n    };\n\n    newSocket.onmessage = (event) => {\n      const receivedMessage = JSON.parse(event.data);\n      setMessages(prevMessages => [...prevMessages, receivedMessage]);\n    };\n\n    return () => {\n      newSocket.close();\n    };\n  }, []);\n\n  const sendMessage = () => {\n    if (messageInput.trim() !== '' && socket && socket.readyState === WebSocket.OPEN) {\n      const message = {\n        text: messageInput,\n        timestamp: new Date().toISOString(),\n      };\n      socket.send(JSON.stringify(message));\n      setMessageInput('');\n    } else {\n      console.error('WebSocket connection is not established yet or is not in OPEN state.');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat-container\">\n        <div className=\"chat-messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n        </div>\n        <div className=\"chat-input\">\n          <input\n            type=\"text\"\n            placeholder=\"Type your message....\"\n            value={messageInput}\n            onChange={(e) => setMessageInput(e.target.value)}\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}