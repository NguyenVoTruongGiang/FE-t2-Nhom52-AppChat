{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nconst useWebSocket = currentUser => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [users] = useState(() => {\n    const userKey = currentUser ? `users_${currentUser}` : \"default_user\";\n    const savedUsers = localStorage.getItem(userKey);\n    return savedUsers ? JSON.parse(savedUsers) : [];\n  });\n  const socketRef = useRef(null);\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\n  useEffect(() => {\n    socketRef.current = new WebSocket(url);\n    socketRef.current.onopen = () => {\n      console.log(\"WebSocket connected successfully.\");\n    };\n    socketRef.current.onmessage = event => {\n      console.log(\"Received message from server:\", event.data);\n      try {\n        const receivedMessage = JSON.parse(event.data);\n        console.log(\"Parsed message:\", receivedMessage);\n        setMessages(prevMessages => [...prevMessages, receivedMessage]);\n      } catch (error) {\n        console.error(\"Failed to parse message from the server:\", error);\n      }\n    };\n    socketRef.current.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n    };\n    return () => {\n      if (socketRef && socketRef.current.readyState === WebSocket.OPEN) {\n        socketRef.current.close();\n      }\n    };\n  }, [url]);\n  useEffect(() => {\n    if (currentUser) {\n      const userKey = `users_${currentUser}`;\n      localStorage.setItem(userKey, JSON.stringify(users));\n      console.log(currentUser);\n    }\n  }, [users, currentUser]);\n  const sendMessage = message => {\n    if (socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(message);\n    } else {\n      console.error(\"WebSocket is not open.\");\n    }\n  };\n  const registerUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"REGISTER\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const loginUser = (username, password) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGIN\",\n        data: {\n          user: username,\n          pass: password\n        }\n      }\n    }));\n  };\n  const sendChatMessage = (type, to, message) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"SEND_CHAT\",\n        data: {\n          type,\n          to,\n          mes: message\n        }\n      }\n    }));\n  };\n  const logout = () => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"LOGOUT\"\n      }\n    }));\n  };\n  const createRoom = name => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"CREATE_ROOM\",\n        data: {\n          name\n        }\n      }\n    }));\n  };\n  const joinRoom = name => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"JOIN_ROOM\",\n        data: {\n          name\n        }\n      }\n    }));\n  };\n  const getRoomChatMessages = (name, page) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"GET_ROOM_CHAT_MES\",\n        data: {\n          name,\n          page\n        }\n      }\n    }));\n  };\n  const getPeopleChatMessages = (name, page) => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"GET_PEOPLE_CHAT_MES\",\n        data: {\n          name,\n          page\n        }\n      }\n    }));\n  };\n  const checkUser = user => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"CHECK_USER\",\n        data: {\n          user\n        }\n      }\n    }));\n  };\n  const getUserList = () => {\n    sendMessage(JSON.stringify({\n      action: \"onchat\",\n      data: {\n        event: \"GET_USER_LIST\"\n      }\n    }));\n  };\n  return {\n    messages,\n    sendMessage,\n    registerUser,\n    loginUser,\n    sendChatMessage,\n    users,\n    logout,\n    createRoom,\n    joinRoom,\n    getRoomChatMessages,\n    getPeopleChatMessages,\n    checkUser,\n    getUserList\n  };\n};\n_s(useWebSocket, \"rS4i8LKwyxEFmvXFkK15oHBPM3Q=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useWebSocket","currentUser","_s","messages","setMessages","users","userKey","savedUsers","localStorage","getItem","JSON","parse","socketRef","url","current","WebSocket","onopen","console","log","onmessage","event","data","receivedMessage","prevMessages","error","onclose","readyState","OPEN","close","setItem","stringify","sendMessage","message","send","registerUser","username","password","action","user","pass","loginUser","sendChatMessage","type","to","mes","logout","createRoom","name","joinRoom","getRoomChatMessages","page","getPeopleChatMessages","checkUser","getUserList"],"sources":["E:/workspace/FE-t2-Nhom52-AppChat/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst useWebSocket = (currentUser) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [users] = useState(() => {\r\n    const userKey = currentUser ? `users_${currentUser}` : \"default_user\";\r\n    const savedUsers = localStorage.getItem(userKey);\r\n    return savedUsers ? JSON.parse(savedUsers) : [];\r\n  });\r\n  const socketRef = useRef(null);\r\n  const url = \"ws://140.238.54.136:8080/chat/chat\";\r\n\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket(url);\r\n\r\n    socketRef.current.onopen = () => {\r\n      console.log(\"WebSocket connected successfully.\");\r\n    };\r\n\r\n    socketRef.current.onmessage = (event) => {\r\n      console.log(\"Received message from server:\", event.data);\r\n      try {\r\n        const receivedMessage = JSON.parse(event.data);\r\n        console.log(\"Parsed message:\", receivedMessage);\r\n        setMessages((prevMessages) => [...prevMessages, receivedMessage]);\r\n      } catch (error) {\r\n        console.error(\"Failed to parse message from the server:\", error);\r\n      }\r\n    };\r\n\r\n    socketRef.current.onclose = () => {\r\n      console.log(\"WebSocket connection closed.\");\r\n    };\r\n\r\n    return () => {\r\n      if (socketRef && socketRef.current.readyState === WebSocket.OPEN) {\r\n        socketRef.current.close();\r\n      }\r\n    };\r\n  }, [url]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      const userKey = `users_${currentUser}`;\r\n      localStorage.setItem(userKey, JSON.stringify(users));\r\n      console.log(currentUser);\r\n    }\r\n  }, [users, currentUser]);\r\n\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(message);\r\n    } else {\r\n      console.error(\"WebSocket is not open.\");\r\n    }\r\n  };\r\n\r\n  const registerUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"REGISTER\",\r\n          data: {\r\n            user: username,\r\n            pass: password,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const loginUser = (username, password) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"LOGIN\",\r\n          data: {\r\n            user: username,\r\n            pass: password,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const sendChatMessage = (type, to, message) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"SEND_CHAT\",\r\n          data: {\r\n            type,\r\n            to,\r\n            mes: message,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const logout = () => {\r\n    sendMessage(\r\n      JSON.stringify({ action: \"onchat\", data: { event: \"LOGOUT\" } })\r\n    );\r\n  };\r\n\r\n  const createRoom = (name) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"CREATE_ROOM\",\r\n          data: { name },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const joinRoom = (name) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"JOIN_ROOM\",\r\n          data: { name },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const getRoomChatMessages = (name, page) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"GET_ROOM_CHAT_MES\",\r\n          data: { name, page },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const getPeopleChatMessages = (name, page) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"GET_PEOPLE_CHAT_MES\",\r\n          data: { name, page },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const checkUser = (user) => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"CHECK_USER\",\r\n          data: { user },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const getUserList = () => {\r\n    sendMessage(\r\n      JSON.stringify({\r\n        action: \"onchat\",\r\n        data: {\r\n          event: \"GET_USER_LIST\",\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return {\r\n    messages,\r\n    sendMessage,\r\n    registerUser,\r\n    loginUser,\r\n    sendChatMessage,\r\n    users,\r\n    logout,\r\n    createRoom,\r\n    joinRoom,\r\n    getRoomChatMessages,\r\n    getPeopleChatMessages,\r\n    checkUser,\r\n    getUserList,\r\n  };\r\n};\r\n\r\nexport default useWebSocket;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}